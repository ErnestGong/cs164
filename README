README file for Programming Assignment 5  (Java edition)

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA5
----------------
Overview:
By calling the cgen in class programc (cool-tree.java), CgenClassTable.java handles most works.
In spite of the functions provided, we first fill in class_nameTab with the corresponding name, and then class_objTab with protObj and init in the ascending order of class tag number(which is stored in the first element of protObj) for each class.

Then we fill in the dispTab. It recursively calls printParentMethods, which will put the method_name and corresponding class into the map if that method_name is not in the map already from children to parent, and then print the method in order from parent to children using the map mentioned above to find the real class for the method (overwrite could exists). If the methods with same name has been filled in by the parent, the children won’t output it again.

For protObj, it will stores tag number, size, entrance for dispTab, and attrs from parents to children. In the meantime, it will stores a map in order to find the offset of attribute in the future. As for tag number it will include the follow the previsit order when we start a dfs from object.It will bring us beneifit when we try to resolve the cgen problem for case. 

For init, it will reserve space for let, case and then pile up the stack. Then, it init its parent attributes first, then cgen the body of attribute. Also, it will call _GenGC_Assign if GC is enabled.

For generating codes for method, it ignores five basic classes, create a list to store the offsets of all parameters, and max spaces for case, and let. Then, it pile up the stack, and cgen the method’s body.

Design Decisions:
we put all the actions that will manipulate stack into in_method(PrintStream str, Integer offset), out_method(PrintStream str, Integer offset), push(), and pop().
    in_method generally push old FP, SELF(s0), and RA into stack, and let the new FP point to the next element of RA, so that it can use FP to access the parameters (and elements in let, case that has been saved space earlier). Also it moves ACC to SELF, so that the method can know which dynamic object has been actually dispatched.
    out_method restore old FP, SELF, RA, pop all the spaces used in this method including spaces for parameters, let, and case. If gc is enabled, it will delete all the contents that is no longer used.
    pop also will delete the content that is no longer used when it pop an element from stack.


We will focus on our design decisions about let, case, new, and GC that are not required by checkpoint.
     2. constants,arith symbol and basic expression
    For constants we generate them with IntSymbol and StringSymbl.For arith operation, we will first cgen and push result into stack cgen e2 and then do the operation, pop the value. For compare operation, we will first generate e1 and e2 as previous, but assign a true boolean as the return true if the value in e1 and e2 matches then it jump to next part of code, otherwise it will be false. As for isvoid, we will do similiar things but we will compare address with 0.

     3.condition and loops
    For condition and loops we will compare the result as in part2(which means eval e1 push the result eval e2 compare) It it matches then we will goto the if condition otherwise we will goto else. For loops we will jump back after we compare the new result. 
 

      3. let (with class assign and object):
    The spaces for the elements used by let has already been reserved before. So it will use a let_lst to maintain reference for let (also mixedt with reference for case variables). The offset is 0 at first, and only cgen for let and case will increment it (different expr in a block can reuse the space for let and case). It will first initialize the variables introduced by let, and then store the result of init expr if it exists. Store the variable name and offset from fp in the head of let_lst, update the offset (+4), then pass it to the cgen for body. Now, for class assign and object, they will first look through let_lst from head, and return the variable as soon as it finds a match (The inner variable in let will be selected). If no match, then it will check the map for parameter, and then map for attributes.

      4. case
    For case, we take the practice the reference cgen program use. With the address of the <expr>’s return value is put into $a0, we visit class tag according to ($a0) with offset 8. And then we compare tag number with tag number for all branches. In order to accept subclass in our case program, we generate class name index in a dfs order, with recording previsit order and post-visit order, we make sure all subclass’s previsit order is in the range of previsit order and postvisit order of its superclass. Thus we can give a range (say 1 and 3 for object IO with subclass Main and A) for each class and compare it with the class name tag and excute efficiently. Also we compare the order in a reverse ordrer of the previsit states of all the class for all branch’s. Thus we can make sure we will jump into subtypes’s branch earlier than into compare with supertype.

      5. new (SELF_TYPE)
    If it’s not SELF_TYPE, then copy the corresponding protObj then init.But if it is SELF_TYPE, then use the class tag number stored in SELF(s0), check the class_objTab to find corresponding protObj and init, then copy and init the object.
      
     6.GC:
erase all corresponding elements in the stack when exit a method or pop, also call _GenGC_Assign when assign to an attribute, which could happen in init and class assign.

Test Case Choices:
    We first ran GC enabled and collecting for each assign (-g -t) on examples provided in PA1, and they all passed.

    Then, we write test cases to test the class_nameTab, class_objTab by printing name for object, and new SELF_TYPE. Also test the dispTab especially for overwriting the inherited methods. 

We generate test cases for all expression, and focus on testing nested and mix expressions of let, case, dispatch, and also self and inheritence. We test case by feeding it different runtime types expect it will bring us output. In perticular, we give branch types include subclass and superclass, also we feed subclass to a superclass branch to test’s if it is still work when involve inheritance. For let we feed it with constant and variable and runtime objects. We expect it will allocate a new address for the id we introduce and is able to function as an assigned variable in the in expr. After the excution we will expect the environment is recovered. 


new, case, let:
    We generate tests cases especially for new SELF_TYPE, nested let, and object access for let variables.

 
GC:  By executing let in a while loop, which executes 70000 times. It throws errors if no GC, but provides correct answer when GC is enabled.

