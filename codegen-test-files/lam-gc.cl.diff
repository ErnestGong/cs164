*** The reference

--- Yours

***************

*** 1,536 ****

  MARS 4.5  Copyright 2003-2014 Pete Sanderson and Kenneth Vollmar
  
! \x.x
! \x.\y.x
! \x.\y.\z.((((x)@(z)))@(((y)@(z))))
! beta-reduce: ((((((\x.\y.\z.((((x)@(z)))@(((y)@(z)))))@(\x.\y.x)))@(\x.x)))@(\x.x)) =>
! ((((\y.\z.((((\x.\y.x)@(z)))@(((y)@(z)))))@(\x.x)))@(\x.x)) =>
! ((\z.((((\x.\y.x)@(z)))@(((\x.x)@(z)))))@(\x.x)) =>
! ((((\x.\y.x)@(\x.x)))@(((\x.x)@(\x.x)))) =>
! ((\y.\x.x)@(((\x.x)@(\x.x)))) =>
! \x.x
! beta-reduce: ((((\x.\y.x)@(\x.x)))@(\x.x)) =>
! ((\y.\x.x)@(\x.x)) =>
! \x.x
! Generating code for ((\x.x)@(\x.x))
! ------------------cut here------------------
! (*Generated by lam.cl (Jeff Foster, March 2000)*)
! class EvalObject inherits IO {
!   eval() : EvalObject { { abort(); self; } };
! };
! class Closure inherits EvalObject {
!   parent : Closure;
!   x : EvalObject;
!   get_parent() : Closure { parent };
!   get_x() : EvalObject { x };
!   init(p : Closure) : Closure {{ parent <- p; self; }};
!   apply(y : EvalObject) : EvalObject { { abort(); self; } };
! };
! class Main {
!   main() : EvalObject {
! (let x : EvalObject <- ((new Closure0).init(new Closure)),
!      y : EvalObject <- ((new Closure1).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac)
! };
! };
! class Closure1 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 1\n");
!       x <- y;
! get_x();}};
! };
! class Closure0 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 0\n");
!       x <- y;
! get_x();}};
! };
  
! ------------------cut here------------------
! Generating code for ((((((\x.\y.\z.((((x)@(z)))@(((y)@(z)))))@(\x.\y.x)))@(\x.x)))@(\x.x))
! ------------------cut here------------------
! (*Generated by lam.cl (Jeff Foster, March 2000)*)
! class EvalObject inherits IO {
!   eval() : EvalObject { { abort(); self; } };
! };
! class Closure inherits EvalObject {
!   parent : Closure;
!   x : EvalObject;
!   get_parent() : Closure { parent };
!   get_x() : EvalObject { x };
!   init(p : Closure) : Closure {{ parent <- p; self; }};
!   apply(y : EvalObject) : EvalObject { { abort(); self; } };
! };
! class Main {
!   main() : EvalObject {
! (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- ((new Closure0).init(new Closure)),
!      y : EvalObject <- ((new Closure1).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure2).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure3).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac)
! };
! };
! class Closure3 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 3\n");
!       x <- y;
! get_x();}};
! };
! class Closure2 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 2\n");
!       x <- y;
! get_x();}};
! };
! class Closure1 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 1\n");
!       x <- y;
! ((new Closure4).init(self));}};
! };
! class Closure4 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 4\n");
!       x <- y;
! get_parent().get_x();}};
! };
! class Closure0 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 0\n");
!       x <- y;
! ((new Closure5).init(self));}};
! };
! class Closure5 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 5\n");
!       x <- y;
! ((new Closure6).init(self));}};
! };
! class Closure6 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 6\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! 
! ------------------cut here------------------
! Generating code for ((((((((((((((((\x.x)@(\x.\y.x)))@(\x.\y.\z.((((x)@(z)))@(((y)@(z)))))))@(\x.\y.\z.((((x)@(z)))@(((y)@(z)))))))@(\x.\y.x)))@(\x.\y.\z.((((x)@(z)))@(((y)@(z)))))))@(\x.x)))@(\x.\y.x)))@(\x.x))
! ------------------cut here------------------
! (*Generated by lam.cl (Jeff Foster, March 2000)*)
! class EvalObject inherits IO {
!   eval() : EvalObject { { abort(); self; } };
! };
! class Closure inherits EvalObject {
!   parent : Closure;
!   x : EvalObject;
!   get_parent() : Closure { parent };
!   get_x() : EvalObject { x };
!   init(p : Closure) : Closure {{ parent <- p; self; }};
!   apply(y : EvalObject) : EvalObject { { abort(); self; } };
! };
! class Main {
!   main() : EvalObject {
! (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- (let x : EvalObject <- ((new Closure0).init(new Closure)),
!      y : EvalObject <- ((new Closure1).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure2).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure3).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure4).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure5).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure6).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure7).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- ((new Closure8).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac)
! };
! };
! class Closure8 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 8\n");
!       x <- y;
! get_x();}};
! };
! class Closure7 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 7\n");
!       x <- y;
! ((new Closure9).init(self));}};
! };
! class Closure9 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 9\n");
!       x <- y;
! get_parent().get_x();}};
! };
! class Closure6 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 6\n");
!       x <- y;
! get_x();}};
! };
! class Closure5 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 5\n");
!       x <- y;
! ((new Closure10).init(self));}};
! };
! class Closure10 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 10\n");
!       x <- y;
! ((new Closure11).init(self));}};
! };
! class Closure11 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 11\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! class Closure4 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 4\n");
!       x <- y;
! ((new Closure12).init(self));}};
! };
! class Closure12 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 12\n");
!       x <- y;
! get_parent().get_x();}};
! };
! class Closure3 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 3\n");
!       x <- y;
! ((new Closure13).init(self));}};
! };
! class Closure13 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 13\n");
!       x <- y;
! ((new Closure14).init(self));}};
! };
! class Closure14 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 14\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! class Closure2 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 2\n");
!       x <- y;
! ((new Closure15).init(self));}};
! };
! class Closure15 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 15\n");
!       x <- y;
! ((new Closure16).init(self));}};
! };
! class Closure16 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 16\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! class Closure1 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 1\n");
!       x <- y;
! ((new Closure17).init(self));}};
! };
! class Closure17 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 17\n");
!       x <- y;
! get_parent().get_x();}};
! };
! class Closure0 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 0\n");
!       x <- y;
! get_x();}};
! };
! 
! ------------------cut here------------------
! Generating code for ((((\x.x)@(((\x.\y.x)@(\x.\y.\z.((((x)@(z)))@(((y)@(z)))))))))@(((\x.\y.x)@(((\x.\y.\z.((((x)@(z)))@(((y)@(z)))))@(\x.\y.\z.((((x)@(z)))@(((y)@(z))))))))))
! ------------------cut here------------------
! (*Generated by lam.cl (Jeff Foster, March 2000)*)
! class EvalObject inherits IO {
!   eval() : EvalObject { { abort(); self; } };
! };
! class Closure inherits EvalObject {
!   parent : Closure;
!   x : EvalObject;
!   get_parent() : Closure { parent };
!   get_x() : EvalObject { x };
!   init(p : Closure) : Closure {{ parent <- p; self; }};
!   apply(y : EvalObject) : EvalObject { { abort(); self; } };
! };
! class Main {
!   main() : EvalObject {
! (let x : EvalObject <- (let x : EvalObject <- ((new Closure0).init(new Closure)),
!      y : EvalObject <- (let x : EvalObject <- ((new Closure1).init(new Closure)),
!      y : EvalObject <- ((new Closure2).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- ((new Closure3).init(new Closure)),
!      y : EvalObject <- (let x : EvalObject <- ((new Closure4).init(new Closure)),
!      y : EvalObject <- ((new Closure5).init(new Closure)) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac)
! };
! };
! class Closure5 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 5\n");
!       x <- y;
! ((new Closure6).init(self));}};
! };
! class Closure6 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 6\n");
!       x <- y;
! ((new Closure7).init(self));}};
! };
! class Closure7 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 7\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! class Closure4 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 4\n");
!       x <- y;
! ((new Closure8).init(self));}};
! };
! class Closure8 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 8\n");
!       x <- y;
! ((new Closure9).init(self));}};
! };
! class Closure9 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 9\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! class Closure3 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 3\n");
!       x <- y;
! ((new Closure10).init(self));}};
! };
! class Closure10 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 10\n");
!       x <- y;
! get_parent().get_x();}};
! };
! class Closure2 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 2\n");
!       x <- y;
! ((new Closure11).init(self));}};
! };
! class Closure11 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 11\n");
!       x <- y;
! ((new Closure12).init(self));}};
! };
! class Closure12 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 12\n");
!       x <- y;
! (let x : EvalObject <- (let x : EvalObject <- get_parent().get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac),
!      y : EvalObject <- (let x : EvalObject <- get_parent().get_x(),
!      y : EvalObject <- get_x() in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac) in
!   case x of
!     c : Closure => c.apply(y);
!     o : Object => { abort(); new EvalObject; };
!   esac);}};
! };
! class Closure1 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 1\n");
!       x <- y;
! ((new Closure13).init(self));}};
! };
! class Closure13 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 13\n");
!       x <- y;
! get_parent().get_x();}};
! };
! class Closure0 inherits Closure {
!   apply(y : EvalObject) : EvalObject {
!     { out_string("Applying closure 0\n");
!       x <- y;
! get_x();}};
! };
! 
! ------------------cut here------------------
! COOL program successfully executed
! 
--- 1,69 ----

  MARS 4.5  Copyright 2003-2014 Pete Sanderson and Kenneth Vollmar
  
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1232 column 9: "Main.main" declared global label but not defined.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 994 column 8: Symbol "VarList.print" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1003 column 8: Symbol "VarListNE.isNil" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1004 column 8: Symbol "VarListNE.head" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1005 column 8: Symbol "VarListNE.tail" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1007 column 8: Symbol "VarListNE.print" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1008 column 8: Symbol "VarListNE.init" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1013 column 8: Symbol "LambdaList.isNil" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1014 column 8: Symbol "LambdaList.headE" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1015 column 8: Symbol "LambdaList.headC" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1016 column 8: Symbol "LambdaList.headN" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1017 column 8: Symbol "LambdaList.tail" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1018 column 8: Symbol "LambdaList.add" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1023 column 8: Symbol "LambdaListNE.isNil" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1024 column 8: Symbol "LambdaListNE.headE" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1025 column 8: Symbol "LambdaListNE.headC" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1026 column 8: Symbol "LambdaListNE.headN" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1027 column 8: Symbol "LambdaListNE.tail" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1028 column 8: Symbol "LambdaList.add" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1029 column 8: Symbol "LambdaListNE.init" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1034 column 8: Symbol "LambdaListRef.isNil" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1035 column 8: Symbol "LambdaListRef.headE" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1036 column 8: Symbol "LambdaListRef.headC" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1037 column 8: Symbol "LambdaListRef.headN" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1038 column 8: Symbol "LambdaListRef.reset" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1039 column 8: Symbol "LambdaListRef.add" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1040 column 8: Symbol "LambdaListRef.removeHead" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1049 column 8: Symbol "Expr.print_self" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1050 column 8: Symbol "Expr.beta" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1051 column 8: Symbol "Expr.substitute" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1052 column 8: Symbol "Expr.gen_code" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1061 column 8: Symbol "Variable.print_self" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1062 column 8: Symbol "Variable.beta" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1063 column 8: Symbol "Variable.substitute" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1064 column 8: Symbol "Variable.gen_code" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1065 column 8: Symbol "Variable.init" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1074 column 8: Symbol "Lambda.print_self" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1075 column 8: Symbol "Lambda.beta" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1076 column 8: Symbol "Lambda.substitute" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1077 column 8: Symbol "Lambda.gen_code" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1078 column 8: Symbol "Lambda.init" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1079 column 8: Symbol "Lambda.apply" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1080 column 8: Symbol "Lambda.gen_closure_code" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1089 column 8: Symbol "App.print_self" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1090 column 8: Symbol "App.beta" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1091 column 8: Symbol "App.substitute" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1092 column 8: Symbol "App.gen_code" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1093 column 8: Symbol "App.init" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1102 column 8: Symbol "Term.var" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1103 column 8: Symbol "Term.lam" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1104 column 8: Symbol "Term.app" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1105 column 8: Symbol "Term.i" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1106 column 8: Symbol "Term.k" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1107 column 8: Symbol "Term.s" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1116 column 8: Symbol "Term.var" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1117 column 8: Symbol "Term.lam" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1118 column 8: Symbol "Term.app" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1119 column 8: Symbol "Term.i" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1120 column 8: Symbol "Term.k" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1121 column 8: Symbol "Term.s" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1122 column 8: Symbol "Main.beta_reduce" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1123 column 8: Symbol "Main.eval_class" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1124 column 8: Symbol "Main.closure_class" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1125 column 8: Symbol "Main.gen_code" not found in symbol table.
! Error in /Users/Kong/Library/Mobile Documents/com~apple~CloudDocs/Spring_2016/164/cs164/./codegen-test-files/lam-gc.cl.my.s line 1126 column 8: Symbol "Main.main" not found in symbol table.
  
! Processing terminated due to errors.
